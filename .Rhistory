result= extract(fit, permuted = FALSE)
result= extract(res3, permuted = FALSE)
names(res3)
res3$`beta[1]`
head(res3$beta)
print(names(res3))
result = as.matrix(res3)
dim(result)
apply(result,2,mean)
result=apply(result,2,mean)
length(result)
result[1:4]
n=1000;
nIter = 1000
coeffMatrix = matrix(0,length(betaT),nIter)
# MCMC parameters
nburn=500; nsave=1000; nskip=0;
# Note larger nburn, nsave and nskip should be used in practice.
mcmc=list(nburn=nburn, nsave=nsave, nskip=nskip, ndisplay=1000);
prior = list(M=1, r0=1);
coeffMatrix = matrix(0,length(betaT),nIter)
for(i in 1:nIter){
sex = rbinom(n,1,0.5)
age = runif(n, -3, 3)
trt = rbinom(n, 1, 0.5)
d = SurvSimulation(age,sex,trt,n,betaT,lambda = 0.05, rho = 1.1, rate0 = 0.02)
res2 = indeptCoxph(formula = Surv(d$tobs,d$delta)~sex + age + sex*trt + age*trt, data=d,
prior=prior, mcmc=mcmc);
coeffMatrix[,i] = res2$coefficients[-3]
}
result = apply(coeffMatrix, 2, mean)
dim(coeffMatrix)
result = apply(coeffMatrix, 1, mean)
result
betaT
data("alzheimers")
library("credsubs")
data("alzheimers")
head(alzheimers)
alzheimers$Treatment<- as.numeric(alzheimers$Treatment) - 1
alzheimers$Sex <- as.numeric(alzheimers$Sex) - 1
alzheimers$Carrier <- as.numeric(alzheimers$Carrier) - 1
alzheimers$Severity <- scale(alzheimers$Severity)
alzheimers$Decline <- scale(alzheimers$Decline)
if (!suppressWarnings(require("nimble"))) {
install.packages("nimble")
}
library("nimble")
nimble.code <- nimbleCode({
### Likelihood ##
for (i in 1 : N) {
# Linear predictor, expanded for clarity
mean[i] <- beta[1] +
beta[2] * Severity[i] + beta[3] * Decline[i] +
beta[4] * Sex[i] + beta[5] * Carrier[i] +
beta[6] * Sex[i] * Carrier[i] +
gamma[1] * Treatment[i] +
gamma[2] * Severity[i] * Treatment[i] +
gamma[3] * Decline[i] * Treatment[i] +
gamma[4] * Sex[i] * Treatment[i] +
gamma[5] * Carrier[i] * Treatment[i] +
gamma[6] * Sex[i] * Carrier[i] * Treatment[i]
# Outcome
Improvement[i] ~ dnorm(mean[i], tau) # tau = 1 / sigma ^ 2
}
# Vague priors for prognostic and baseline treatment effects
# Conservative priors for treatment-covariate interactions
for (j in 1 : 6) {
beta[j] ~ dnorm(0, 10E-4)
gamma[j] ~ dnorm(0, ifelse(j == 1, 10E-4, 1))
}
# Vague prior for error variance
tau ~ dgamma(10E-4, 10E-4)
})
nimble.constants <- list(N = nrow(alzheimers))
nimble.data <- list(Treatment = as.numeric(alzheimers$Treatment),
Severity = as.vector(alzheimers$Severity),
Decline = as.vector(alzheimers$Decline),
Sex = as.numeric(alzheimers$Sex),
Carrier = as.numeric(alzheimers$Carrier),
Improvement = as.vector(alzheimers$Improvement))
nimble.inits <- list(beta=rep(0, 6),
gamma=rep(0, 6),
tau = 1)
nimble.model <- nimbleModel(code = nimble.code,
name = 'example',
constants = nimble.constants,
data = nimble.data,
inits = nimble.inits)
nimble.spec <- configureMCMC(nimble.model)
nimble.mcmc <- buildMCMC(nimble.spec)
C.model <- compileNimble(nimble.model)
C.mcmc <- compileNimble(nimble.mcmc, project = nimble.model)
### Run MCMC ###
C.mcmc$run(11000)
mcmc.trace <- as.matrix(C.mcmc$mvSamples)[1001 : 11000, ]
pte.params <- mcmc.trace[, c("gamma[1]", "gamma[2]", "gamma[3]",
"gamma[4]", "gamma[5]", "gamma[6]")]
design <- expand.grid(Treatment = 1,
Severity = 9 : 49,
Decline = 0 : 8,
Sex = c(0, 1),
Carrier = c(0, 1))
design$Severity <- scale(design$Severity,
center = attr(alzheimers$Severity, "scaled:center"),
scale = attr(alzheimers$Severity, "scaled:scale"))
design$Decline   <- scale(design$Decline,
center=attr(alzheimers$Decline, "scaled:center"),
scale=attr(alzheimers$Decline, "scaled:scale"))
design$Sex.by.Carrier <- design$Sex * design$Carrier
head(design)
View(pte.params)
View(design)
res2$coefficients
SurvSimulation = function(age,sex,trt,n, betaT,lambda, rho, rate0){
X=cbind(sex,age,sex*trt,age*trt)
U = runif(n, 0, 1)
#weibull distribution
Y = (-log(U)/(lambda*exp(X%*%betaT)))^{1/rho}
C = rexp(n, rate=rate0)
tobs = pmin(Y,C)
C.ind = as.numeric(Y <= C)
d = data.frame(tobs=tobs, age=age, sex=sex, trt=trt, delta=C.ind);
#print(table(d$delta)/n)
return(d)
}
res2 = indeptCoxph(formula = Surv(d$tobs,d$delta)~sex + age + trt + sex*trt + age*trt, data=d,
prior=prior, mcmc=mcmc);
names(res2)
dim(res2$mcmc)
dim(res2$coefficients)
dim(res2$beta)
pte.params = res2[3:5,]
pte.params = res2$beta[3:5,]
design <- expand.grid(trt = 1,
sex = c(0,1),
age = -3 : 3)
View(design)
cs  <- credsubs(params = pte.params, design = design)
cs  <- credsubs(params = t(pte.params), design = design)
cs
source('//Users//sony//Desktop//Merck//Survival RCode//bayes-linear.R')
install.packages('matrixcalc')
source('//Users//sony//Desktop//Merck//Survival RCode//bayes-linear.R')
install.packages('matrixStats')
source('//Users//sony//Desktop//Merck//Survival RCode//bayes-linear.R')
delta = 1;
dim(design)
real.effect = design%*%res2$coefficients[3:5]
res2$coefficients[3:5]
real.effect = design%*%t(res2$coefficients[3:5])
real.effect = design%*%as.vector(res2$coefficients[3:5])
real.effect = as.matrix(design)%*%as.vector(res2$coefficients[3:5])
betaT[3:5]
real.effect = as.matrix(design)%*%betaT[2:5]
real.effect = as.matrix(design)%*%t(betaT[2:5])
t(betaT[2:5])
real.effect = as.matrix(design)%*%t(betaT[2:4])
real.effect = as.matrix(design)%*%(betaT[2:4])
real.subgroup = real.effect < delta
delta
View(real.effect)
View(real.subgroup)
real.subgroup = real.effect > delta
real.effect[1]
real.effect[1] > 1
csp.size     <- credible.subgroup.pair.size(cs$exclusive, cs$inclusive)
summ.stats.D <- test.summary(cs$exclusive, real.subgroup)
summ.stats.S <- test.summary(cs$inclusive, real.subgroup)
avg.over     <- average.overestimate(cs$exclusive, real.effect, delta)
max.over     <- max(maximum.overestimate(cs$exclusive, real.effect, delta), 0)
success.D <- all(real.subgroup[cs$exclusive]) # D is exclusive
success.S <- all(cs$inclusive[real.subgroup]) # S is inclusive
success <- success.D && success.S
success
simulateCreditSurv = function(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0){
##generate simulation data
sex = rbinom(n,1,0.5)
age = runif(n, -3, 3)
trt = rbinom(n, 1, 0.5)
d = SurvSimulation(age,sex,trt,n,betaT,lambda, rho, rate0)
design <- expand.grid(trt = 1,
sex = c(0,1),
age = -3 : 3)
##real effect
real.effect = as.matrix(design)%*%(betaT[3:5])
real.subgroup = real.effect > delta
##Get the posterior
res2 = indeptCoxph(formula = Surv(d$tobs,d$delta)~sex + age + trt + sex*trt + age*trt, data=d,
prior=prior, mcmc=mcmc);
pte.params = res2$beta[3:5,]
##Compute the credible subgroups
cs  <- credsubs(params = t(pte.params), design = design, threshold=delta)
# Credible subgroup diagnostics
##D: exclusive, S: inclusive
csp.size     <- credible.subgroup.pair.size(cs$exclusive, cs$inclusive)
summ.stats.D <- test.summary(cs$exclusive, real.subgroup)
summ.stats.S <- test.summary(cs$inclusive, real.subgroup)
avg.over     <- average.overestimate(cs$exclusive, real.effect, delta)
max.over     <- max(maximum.overestimate(cs$exclusive, real.effect, delta), 0)
# Check credible subgroup coverage
success.D <- all(real.subgroup[cs$exclusive]) # D is exclusive
success.S <- all(cs$inclusive[real.subgroup]) # S is inclusive
success <- success.D && success.S
return(c(success.tot=success, success.D=success.D, success.S=success.S, csp.size=csp.size, #error,
summ.stats.D, summ.stats.S, avg.over=avg.over, max.over=max.over,
mse.effect=mse.effect, het.test=het.test))
}
betaT = c(0.2,0.2,0.5,0.5,0.01)
delta = 1;
n=100; nIter = 1000;
nburn=500; nsave=1000; nskip=0;
mcmc=list(nburn=nburn, nsave=nsave, nskip=nskip, ndisplay=1000);
prior = list(M=1, r0=1);
table.result = matrix(0,16,nIter)
for(iter in 1:nIter){
table.result[,iter] = simulateCreditSurv(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0);
}
SurvSimulation = function(age,sex,trt,n, betaT,lambda, rho, rate0){
X=cbind(sex, age, trt, sex*trt, age*trt)
U = runif(n, 0, 1)
#weibull distribution
Y = (-log(U)/(lambda*exp(X%*%betaT)))^{1/rho}
C = rexp(n, rate=rate0)
tobs = pmin(Y,C)
C.ind = as.numeric(Y <= C)
d = data.frame(tobs=tobs, age=age, sex=sex, trt=trt, delta=C.ind);
#print(table(d$delta)/n)
return(d)
}
for(iter in 1:nIter){
print(paste('Iter ',iter))
table.result[,iter] = simulateCreditSurv(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0);
}
simulateCreditSurv = function(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0){
##generate simulation data
sex = rbinom(n,1,0.5)
age = runif(n, -3, 3)
trt = rbinom(n, 1, 0.5)
d = SurvSimulation(age,sex,trt,n,betaT,lambda, rho, rate0)
design <- expand.grid(trt = 1,
sex = c(0,1),
age = -3 : 3)
##real effect
real.effect = as.matrix(design)%*%(betaT[3:5])
real.subgroup = real.effect > delta
##Get the posterior
res2 = indeptCoxph(formula = Surv(d$tobs,d$delta)~sex + age + trt + sex*trt + age*trt, data=d,
prior=prior, mcmc=mcmc);
pte.params = res2$beta[3:5,]
##Compute the credible subgroups
cs  <- credsubs(params = t(pte.params), design = design, threshold=delta)
# Credible subgroup diagnostics
##D: exclusive, S: inclusive
csp.size     <- credible.subgroup.pair.size(cs$exclusive, cs$inclusive)
summ.stats.D <- test.summary(cs$exclusive, real.subgroup)
summ.stats.S <- test.summary(cs$inclusive, real.subgroup)
avg.over     <- average.overestimate(cs$exclusive, real.effect, delta)
max.over     <- max(maximum.overestimate(cs$exclusive, real.effect, delta), 0)
# Check credible subgroup coverage
success.D <- all(real.subgroup[cs$exclusive]) # D is exclusive
success.S <- all(cs$inclusive[real.subgroup]) # S is inclusive
success <- success.D && success.S
return(c(success.tot=success, success.D=success.D, success.S=success.S, csp.size=csp.size, #error,
summ.stats.D, summ.stats.S, avg.over=avg.over, max.over=max.over))
}
for(iter in 1:nIter){
print(paste('Iter ',iter))
table.result[,iter] = simulateCreditSurv(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0);
}
table.result = matrix(0,14,nIter)
for(iter in 1:nIter){
print(paste('Iter ',iter))
table.result[,iter] = simulateCreditSurv(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0);
}
saveRDS(table.result,file = '//Users//sony//Desktop//Merck//Survival RCode//tableSim.rds')
warnings(1)
result = simulateCreditSurv(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0);
library(survival)
library(spBayesSurv)
library(credsubs)
source('//Users//sony//Desktop//Merck//Survival RCode//bayes-linear.R')
### generate data
SurvSimulation = function(age,sex,trt,n, betaT,lambda, rho, rate0){
X=cbind(sex, age, trt, sex*trt, age*trt)
U = runif(n, 0, 1)
#weibull distribution
Y = (-log(U)/(lambda*exp(X%*%betaT)))^{1/rho}
C = rexp(n, rate=rate0)
tobs = pmin(Y,C)
C.ind = as.numeric(Y <= C)
d = data.frame(tobs=tobs, age=age, sex=sex, trt=trt, delta=C.ind);
#print(table(d$delta)/n)
return(d)
}
betaT = c(0.2,0.2,0.5,0.5,0.01)
delta = 1;
nburn=500; nsave=1000; nskip=0;
mcmc=list(nburn=nburn, nsave=nsave, nskip=nskip, ndisplay=1000);
prior = list(M=1, r0=1);
sex = rbinom(n,1,0.5)
age = runif(n, -3, 3)
n=100;
sex = rbinom(n,1,0.5)
age = runif(n, -3, 3)
trt = rbinom(n, 1, 0.5)
d = SurvSimulation(age,sex,trt,n,betaT,lambda = 0.05, rho = 1.1, rate0 = 0.02)
View(d)
res2 = indeptCoxph(formula = Surv(d$tobs,d$delta)~sex + age + trt + sex*trt + age*trt, data=d,
prior=prior, mcmc=mcmc);
res2$coefficients
design <- expand.grid(trt = 1,
sex = c(0,1),
age = -3 : 3)
pte.params = res2$beta[3:5,]
cs  <- credsubs(params = t(pte.params), design = design, threshold=delta)
real.effect = as.matrix(design)%*%(betaT[2:4])
real.subgroup = real.effect > delta
csp.size     <- credible.subgroup.pair.size(cs$exclusive, cs$inclusive)
summ.stats.D <- test.summary(cs$exclusive, real.subgroup)
summ.stats.S <- test.summary(cs$inclusive, real.subgroup)
avg.over     <- average.overestimate(cs$exclusive, real.effect, delta)
max.over     <- max(maximum.overestimate(cs$exclusive, real.effect, delta), 0)
maximum.overestimate(cs$exclusive, real.effect, delta)
temp.table =readRDS('//Users//sony//Desktop//Merck//Survival RCode//tableSim.rds')
sum.table = apply(temp.table,2,mean)
sum.table = apply(temp.table,1,mean)
sum.table
View(temp.table)
res2$coefficients
res1 = coxph(Surv(d$tobs,d$delta)~sex + age + trt + sex*trt + age*trt, data=d)
res1$coefficients
summ.stats.D
library(survival)
library(spBayesSurv)
library(credsubs)
source('//Users//sony//Desktop//Merck//Survival RCode//bayes-linear.R')
#
SurvSimulation = function(age,sex,trt,n, betaT,lambda, rho, rate0){
X=cbind(sex, age, trt, sex*trt, age*trt)
U = runif(n, 0, 1)
#weibull distribution
Y = (-log(U)/(lambda*exp(X%*%betaT)))^{1/rho}
C = rexp(n, rate=rate0)
tobs = pmin(Y,C)
C.ind = as.numeric(Y <= C)
d = data.frame(tobs=tobs, age=age, sex=sex, trt=trt, delta=C.ind);
#print(table(d$delta)/n)
return(d)
}
betaT = c(1,1.3,1.2,2.5,4);
n=100;
delta = 1;
n=100; nIter = 100;
nburn=500; nsave=1000; nskip=0;
mcmc=list(nburn=nburn, nsave=nsave, nskip=nskip, ndisplay=1000);
prior = list(M=1, r0=1);
table.result = matrix(0,7,nIter)
for(iter in 1:nIter){
print(paste('Iter ',iter))
table.result[,iter] = simulateCreditSurv(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0);
}
simulateCreditSurv = function(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0){
##generate simulation data
sex = rbinom(n,1,0.5)
age = runif(n, -3, 3)
trt = rbinom(n, 1, 0.5)
d = SurvSimulation(age,sex,trt,n,betaT,lambda, rho, rate0)
design <- expand.grid(trt = 1,
sex = c(0,1),
age = -3 : 3)
##real effect
real.effect = as.matrix(design)%*%(betaT[3:5])
real.subgroup = real.effect > delta
##Get the posterior
res2 = indeptCoxph(formula = Surv(d$tobs,d$delta)~sex + age + trt + sex*trt + age*trt, data=d,
prior=prior, mcmc=mcmc);
pte.params = res2$beta[3:5,]
##Compute the credible subgroups
cs  <- credsubs(params = t(pte.params), design = design, threshold=delta)
# Credible subgroup diagnostics
est.effect = as.matrix(design) %*% res2$coefficients[3:5]
mse.effect <- mean((est.effect - real.effect) ^ 2)
##D: exclusive, S: inclusive
csp.size     <- credible.subgroup.pair.size(cs$exclusive, cs$inclusive)
summ.stats.D <- test.summary(cs$exclusive, real.subgroup)
summ.stats.S <- test.summary(cs$inclusive, real.subgroup)
avg.over     <- average.overestimate(cs$exclusive, real.effect, delta)
max.over     <- max(maximum.overestimate(cs$exclusive, real.effect, delta), 0)
# Check credible subgroup coverage
success.D <- all(real.subgroup[cs$exclusive]) # D is exclusive
success.S <- all(cs$inclusive[real.subgroup]) # S is inclusive
success <- success.D && success.S
#return(c(success.tot=success, success.D=success.D, success.S=success.S, csp.size=csp.size, #error,
#         summ.stats.D, summ.stats.S, avg.over=avg.over, max.over=max.over))
return(c(success.tot=success, csp.size=csp.size, #error,
summ.stats.D,mse.effect=mse.effect))
}
for(iter in 1:nIter){
print(paste('Iter ',iter))
table.result[,iter] = simulateCreditSurv(n, betaT, lambda = 0.05, rho = 1.1, rate0 = 0.02, prior, mcmc,delta=0);
}
warnings(1)
temp.table = table
temp.table = table.result
sum.table = apply(temp.table,1,mean)
sum.table
est.effect
shiny::runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
runApp('/Volumes/GoogleDrive/My Drive/A0 MERCK SYNC/RCode/Survival/CredibleSurv/CredibleSurvial')
devtools::install_github("yihui/xaringan")
install.packages('devtools')
devtools::install_github("yihui/xaringan")
devtools::install_github("hadley/devtools")
install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
install.packages('backports')
install.packages("devtools")
library(devtools)
devtools::install_github("yihui/xaringan")
install.packages('DiagrammeR')
xaringan:::inf_mr()
xaringan:::inf_mr()
install.packages('magic')
install.packages('magick')
library(magick)
install.packages('pdftools')
xaringan:::inf_mr()
xaringan:::inf_mr()
library(rjags)
install.packages('rjags')
library(rjags)
xaringan:::inf_mr()
xaringan:::inf_mr()
install.packages(c("boot", "callr", "cluster", "coda", "curl", "devtools", "digest", "dplyr", "DT", "evaluate", "fs", "ggplot2", "git2r", "hms", "knitr", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "openssl", "pillar", "processx", "raster", "rcmdcheck", "remotes", "rlang", "rmarkdown", "rpart", "servr", "survival", "tibble", "tinytex", "usethis", "visNetwork", "xaringan", "xfun", "XML"))
y
install.packages(c("boot", "callr", "cluster", "coda", "curl", "devtools", "digest", "dplyr", "DT", "evaluate", "fs", "ggplot2", "git2r", "hms", "knitr", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "openssl", "pillar", "processx", "raster", "rcmdcheck", "remotes", "rlang", "rmarkdown", "rpart", "servr", "survival", "tibble", "tinytex", "usethis", "visNetwork", "xaringan", "xfun", "XML"))
setwd("~/Documents/GitHub/DuyNgo")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
