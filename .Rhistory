test2.3=SimDepTestEqual(mu_x = diag(1,d,d), mu_y = diag(1.1,d,d),d,n,n.sim,variance=1,dependence.control)
temp=test2.1
p.signed = temp$p.signed; p.rank=temp$p.rank;
reject.signed = sapply(1:length(dependence.control), function(i) length(which(p.signed[i,]<0.05))/n.sim,simplify = "array" )
reject.rank = sapply(1:length(dependence.control), function(i) length(which(p.rank[i,]<0.05))/n.sim,simplify = "array" )
plot(dependence.control, reject.signed,col="red",cex.lab=1.5,cex.axis=1.5, lwd=3,type="l",ylim=c(0,1), xlab = "w",ylab = 'Rejection Rate')
lines(dependence.control, reject.rank,lwd=3,col="blue")
abline(h = 0.05, lty = 3, col = 1,lwd=2)
temp=test2.2
p.signed = temp$p.signed; p.rank=temp$p.rank;
reject.signed = sapply(1:length(dependence.control), function(i) length(which(p.signed[i,]<0.05))/n.sim,simplify = "array" )
reject.rank = sapply(1:length(dependence.control), function(i) length(which(p.rank[i,]<0.05))/n.sim,simplify = "array" )
plot(dependence.control, reject.signed,col="red",cex.lab=1.5,cex.axis=1.5, lwd=3,type="l",ylim=c(0,1), xlab = "w",ylab = 'Rejection Rate')
lines(dependence.control, reject.rank,lwd=3,col="blue")
abline(h = 0.05, lty = 3, col = 1,lwd=2)
test2.1=SimDepTestEqual(mu_x = diag(1,d,d), mu_y = diag(1.1,d,d),d,n,n.sim,variance=0.1,dependence.control)
test2.2=SimDepTestEqual(mu_x = diag(1,d,d), mu_y = diag(1.1,d,d),d,n,n.sim,variance=0.2,dependence.control)
test2.3=SimDepTestEqual(mu_x = diag(1,d,d), mu_y = diag(1.1,d,d),d,n,n.sim,variance=0.3,dependence.control)
test2.4=SimDepTestEqual(mu_x = diag(1,d,d), mu_y = diag(1.5,d,d),d,n,n.sim,variance=0.1,dependence.control)
temp=test2.1
p.signed = temp$p.signed; p.rank=temp$p.rank;
reject.signed = sapply(1:length(dependence.control), function(i) length(which(p.signed[i,]<0.05))/n.sim,simplify = "array" )
reject.rank = sapply(1:length(dependence.control), function(i) length(which(p.rank[i,]<0.05))/n.sim,simplify = "array" )
plot(dependence.control, reject.signed,col="red",cex.lab=1.5,cex.axis=1.5, lwd=3,type="l",ylim=c(0,1), xlab = "w",ylab = 'Rejection Rate')
lines(dependence.control, reject.rank,lwd=3,col="blue")
abline(h = 0.05, lty = 3, col = 1,lwd=2)
temp=test2.2
p.signed = temp$p.signed; p.rank=temp$p.rank;
reject.signed = sapply(1:length(dependence.control), function(i) length(which(p.signed[i,]<0.05))/n.sim,simplify = "array" )
reject.rank = sapply(1:length(dependence.control), function(i) length(which(p.rank[i,]<0.05))/n.sim,simplify = "array" )
plot(dependence.control, reject.signed,col="red",cex.lab=1.5,cex.axis=1.5, lwd=3,type="l",ylim=c(0,1), xlab = "w",ylab = 'Rejection Rate')
lines(dependence.control, reject.rank,lwd=3,col="blue")
abline(h = 0.05, lty = 3, col = 1,lwd=2)
temp=test2.3
p.signed = temp$p.signed; p.rank=temp$p.rank;
reject.signed = sapply(1:length(dependence.control), function(i) length(which(p.signed[i,]<0.05))/n.sim,simplify = "array" )
reject.rank = sapply(1:length(dependence.control), function(i) length(which(p.rank[i,]<0.05))/n.sim,simplify = "array" )
plot(dependence.control, reject.signed,col="red",cex.lab=1.5,cex.axis=1.5, lwd=3,type="l",ylim=c(0,1), xlab = "w",ylab = 'Rejection Rate')
lines(dependence.control, reject.rank,lwd=3,col="blue")
abline(h = 0.05, lty = 3, col = 1,lwd=2)
temp=test2.4
p.signed = temp$p.signed; p.rank=temp$p.rank;
reject.signed = sapply(1:length(dependence.control), function(i) length(which(p.signed[i,]<0.05))/n.sim,simplify = "array" )
reject.rank = sapply(1:length(dependence.control), function(i) length(which(p.rank[i,]<0.05))/n.sim,simplify = "array" )
plot(dependence.control, reject.signed,col="red",cex.lab=1.5,cex.axis=1.5, lwd=3,type="l",ylim=c(0,1), xlab = "w",ylab = 'Rejection Rate')
lines(dependence.control, reject.rank,lwd=3,col="blue")
abline(h = 0.05, lty = 3, col = 1,lwd=2)
result = list(test2.1 = test2.1,test2.2 = test2.2,test2.3 = test2.3,test2.4 = test2.4)
saveRDS(result,'C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\MeanDifference.rds')
roster = read.csv(file = "C:\\Users\\Sony\\Dropbox\\UCI\\Teaching Assistant\\RCode\\Data\\roster.csv", header = T)
#roster = read.csv(file = "//Users//sony//Dropbox//UCI//Teaching Assistant//RCode//Data//roster.csv", header = T)
colnames(roster) = c("studID","name","UCINetID")
attendance = read.csv(file = "C:\\Users\\Sony\\Dropbox\\UCI\\Teaching Assistant\\RCode\\Data\\attendanceWk6.csv", header = T)
#attendance = read.csv(file = "//Users//sony//Dropbox//UCI//Teaching Assistant//RCode//Data//attendanceWk10.csv", header = T)
colnames(attendance)[4] = "Total"
attendance$UCINetID = toupper(attendance$UCINetID)
attendance[,dim(attendance)[2]] = as.integer(gsub("[*]","",attendance[,dim(attendance)[2]]))
#-----------------------
# Merging with Roster --
#-----------------------
Final <- merge(roster, attendance , by = c("UCINetID"), all.x = T)
Final$Total = Final[,dim(Final)[2]]
Final$Total[is.na(Final$Total)] = rep(0,length(Final$Total[is.na(Final$Total)]))
max.point=1
for(i in 1:dim(Final)[1]){
if(Final$Total[i]>max.point)
Final$Total[i] = max.point
}
##REMEMBER CHANGE THE FILE NAME
write.csv(Final, file = "C:\\Users\\Sony\\Dropbox\\UCI\\Teaching Assistant\\RCode\\UploadEEE\\week6.csv", row.names = F)
#write.csv(Final, file = "//Users//sony//Dropbox//UCI//Teaching Assistant//RCode//UploadEEE//Atten_10.csv", row.names = F)
# B: studentID, F: Score, comma-delimited
roster = read.csv(file = "C:\\Users\\Sony\\Dropbox\\UCI\\Teaching Assistant\\RCode\\Data\\roster.csv", header = T)
#roster = read.csv(file = "//Users//sony//Dropbox//UCI//Teaching Assistant//RCode//Data//roster.csv", header = T)
colnames(roster) = c("studID","name","UCINetID")
attendance = read.csv(file = "C:\\Users\\Sony\\Dropbox\\UCI\\Teaching Assistant\\RCode\\Data\\attendanceWk6.csv", header = T)
#attendance = read.csv(file = "//Users//sony//Dropbox//UCI//Teaching Assistant//RCode//Data//attendanceWk10.csv", header = T)
colnames(attendance)[4] = "Total"
attendance$UCINetID = toupper(attendance$UCINetID)
attendance[,dim(attendance)[2]] = as.integer(gsub("[*]","",attendance[,dim(attendance)[2]]))
#-----------------------
# Merging with Roster --
#-----------------------
Final <- merge(roster, attendance , by = c("UCINetID"), all.x = T)
Final$Total = Final[,dim(Final)[2]]
Final$Total[is.na(Final$Total)] = rep(0,length(Final$Total[is.na(Final$Total)]))
max.point=1
for(i in 1:dim(Final)[1]){
if(Final$Total[i]>max.point)
Final$Total[i] = max.point
}
##REMEMBER CHANGE THE FILE NAME
write.csv(Final, file = "C:\\Users\\Sony\\Dropbox\\UCI\\Teaching Assistant\\RCode\\UploadEEE\\week6.csv", row.names = F)
#write.csv(Final, file = "//Users//sony//Dropbox//UCI//Teaching Assistant//RCode//UploadEEE//Atten_10.csv", row.names = F)
# B: studentID, F: Score, comma-delimited
library(pdSpecEst)
library(expm)
library(depthTools)
#install.packages("pdSpecEst")
#source("//Users//sony//Dropbox//UCI//RESEARCH//4. RCode//SmoothingFunctions.R")
VectLowerMatrix=function(temp1){
p=dim(temp1)[1]
n=dim(temp1)[3]
x=matrix(0,n,p*(p-1)/2+p)
for(i in 1:n){
x.temp=temp1[,,i]
x[i,] = x.temp[lower.tri(x.temp, diag = TRUE)]
}
return(x)
}
DrawRR = function(temp,depedence.control){
p.signed = temp$p.signed; p.rank=temp$p.rank;
reject.signed = sapply(1:length(dependence.control), function(i) length(which(p.signed[i,]<0.05))/n.sim,simplify = "array" )
reject.rank = sapply(1:length(dependence.control), function(i) length(which(p.rank[i,]<0.05))/n.sim,simplify = "array" )
plot(dependence.control, reject.signed,col="red", type="l",ylim=c(0,1), xlab = "w",ylab = 'Rejection Rate')
lines(dependence.control, reject.rank,col="blue")
abline(h = 0.05, lty = 3, col = 1)
legend(0.6,0.5, legend=c("Signed Rank Test", "Rank Sum Test"),
col=c("red", "blue"), lty=1:1, cex=0.7,box.lty=1)
}
Expm1 <- function(A, B){
e.A <- eigen(A, symmetric = T)
sqrt.A <- (e.A$vectors %*% diag(sqrt(e.A$values))) %*% t(Conj(e.A$vectors))
isqrt.A <- solve(sqrt.A)
e.AB <- eigen((isqrt.A %*% B) %*% t(Conj(isqrt.A)), symmetric = T)
exp.AB <- (e.AB$vectors %*% diag(exp(e.AB$values))) %*% t(Conj(e.AB$vectors))
return((sqrt.A %*% exp.AB) %*% sqrt.A)
}
## Subject-specific means
ast <- function(A, B) (A %*% B) %*% t(Conj(A))
SimLocTest = function(mu,U,d,n.sim,variance,location){
p.signed = p.rank  = matrix(0,length(location),n.sim)
for(i in 1:length(location)){
for(sim.count in 1:n.sim){
print(paste('Location: ', location[i], ' .Iter: ',sim.count))
## Generate paired samples X,Y
X = replicate(100, Expm(mu, H.coeff(variance*rnorm(d^2), inverse = T)))
Y = replicate(100, Expm(mu + location[i]*U, H.coeff(variance*rnorm(d^2), inverse = T)))
p.signed[i,sim.count] = pdRankTests(array(c(X, Y), dim = c(d, d, 2*n)), test = "signed.rank", metric = 'logEuclidean')$p.value
p.rank[i,sim.count] = pdRankTests(array(c(X, Y), dim=c(d,d,2*n)), sample.sizes = c(n,n), test = 'rank.sum', metric = 'logEuclidean')$p.value
#p.rank[i,sim.count] = pdRankTests(array(c(X, Y), dim=c(d,d,2*n)), sample.sizes = c(n,n), test = 'rank.sum', metric = 'Riemannian')$p.value
}
}
return(list(p.signed = p.signed, p.rank=p.rank))
}
location = seq(-4,4,0.5)
d = 10
n = 100; n.sim = 100;
test.2.1 = SimLocTest(mu = diag(4.5,d,d),U = diag(0.5,d,d),d,n.sim,variance=1,location)
temp=test.2.1
p.signed = temp$p.signed; p.rank=temp$p.rank;
reject.signed = sapply(1:length(location), function(i) length(which(p.signed[i,]<0.05))/n.sim,simplify = "array" )
reject.rank = sapply(1:length(location), function(i) length(which(p.rank[i,]<0.05))/n.sim,simplify = "array" )
plot(location, reject.signed,col="red", type="l",ylim=c(0,1), xlab = expression(beta),ylab = 'False Positive')
lines(location, reject.rank,col="blue")
abline(h = 0.05, lty = 3, col = 1)
legend(2.4,0.3, legend=c("Signed Rank Test", "Rank Sum Test"),
col=c("red", "blue"), lty=1:1, cex=0.8,box.lty=1)
plot(location, reject.signed,col="red", type="l",ylim=c(0,1),cex.lab=1.5,cex.axis=1.5, lwd=3, xlab = expression(beta),ylab = 'False Positive')
lines(location, reject.rank,col="blue", lwd=3)
abline(h = 0.05, lty = 3, col = 1)
legend(2.4,0.3, legend=c("Signed Rank Test", "Rank Sum Test"),
col=c("red", "blue"), lty=1:1, cex=1.5,box.lty=1)
plot(location, reject.signed,col="red", type="l",ylim=c(0,1),cex.lab=1.5,cex.axis=1.5, lwd=3, xlab = expression(beta),ylab = 'False Positive')
lines(location, reject.rank,col="blue", lwd=3)
abline(h = 0.05, lty = 3, col = 1)
legend(2.4,0.3, legend=c("Signed Rank Test", "Rank Sum Test"),
col=c("red", "blue"), lty=1:1, cex=0.8,box.lty=1)
plot(location, reject.signed,col="red", type="l",ylim=c(0,1),cex.lab=1.5,cex.axis=1.5, lwd=3, xlab = expression(beta),ylab = 'Rejection Rate')
lines(location, reject.rank,col="blue", lwd=3)
abline(h = 0.05, lty = 3, col = 1)
legend(2.4,0.3, legend=c("Signed Rank Test", "Rank Sum Test"),
col=c("red", "blue"), lty=1:1, cex=0.8,box.lty=1)
qnorm(0.95,0,1)
qt(0.95,10)
qt(0.95,1)
qt(0.95,100)
qt(0.95,200)
qt(0.95,2000)
library(depthTools)
library(expm)
library(corrplot)
library(animation)
source("//Users//sony//Dropbox//UCI//RESEARCH//4. RCode//SmoothingFunctions.R")
#source("C:\\Users\\Sony\\Dropbox\\UCI\\RESEARCH\\4. RCode\\SmoothingFunctions.R")
###################################################################################
###################################################################################
delta = c(1:3)
theta = c(4:7)
alpha = c(8:15)
#beta = c(16:31)
#gamma = c(32:50)
beta = c(16:31)
gamma=c(32:50)
freqband.list = list(delta=delta,theta=theta,alpha=alpha,beta=beta,gamma=gamma);
col1 <- colorRampPalette(c("white","blue","blue","yellow", "red"))
freqname = c("delta","theta","alpha","beta","gamma")
myelectrodes = readRDS("C:\\Users\\Sony\\Dropbox\\UCI\\RESEARCH\\4. RCode\\EEG Spasms Result\\channelUsed.rds")
### 1:42: IS Patients, 43-63 Normal
tempLabel = readRDS("C:\\Users\\Sony\\Dropbox\\UCI\\RESEARCH\\4. RCode\\EEG Spasms Result\\SubchannelUsed.rds")
##tempLabel = tempLabel[-51,]  ##delete Normal 11 (position 51)
################################################################################################
###############################################################################################
####      IS Patient
filepath = "C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\IS Patients\\"
#filepath = "//Users//sony//Desktop//Plots//EEGDataServer//ISCoh//"
##### IS Patient
subName = 1:34
### 19x19 connection, #number of subject, frequency
p = length(myelectrodes)
medianListPre = array(0, dim = c(p,p,21,5));
medianListPost = array(0, dim = c(p,p,21,5));
source("//Users//sony//Dropbox//UCI//RESEARCH//2. RCode//SmoothingFunctions.R")
#source("C:\\Users\\Sony\\Dropbox\\UCI\\RESEARCH\\4. RCode\\SmoothingFunctions.R")
###################################################################################
###################################################################################
delta = c(1:3)
theta = c(4:7)
alpha = c(8:15)
#beta = c(16:31)
#gamma = c(32:50)
beta = c(16:31)
gamma=c(32:50)
freqband.list = list(delta=delta,theta=theta,alpha=alpha,beta=beta,gamma=gamma);
col1 <- colorRampPalette(c("white","blue","blue","yellow", "red"))
freqname = c("delta","theta","alpha","beta","gamma")
myelectrodes = readRDS("C:\\Users\\Sony\\Dropbox\\UCI\\RESEARCH\\2. RCode\\EEG Spasms Result\\channelUsed.rds")
### 1:42: IS Patients, 43-63 Normal
tempLabel = readRDS("C:\\Users\\Sony\\Dropbox\\UCI\\RESEARCH\\2. RCode\\EEG Spasms Result\\SubchannelUsed.rds")
##tempLabel = tempLabel[-51,]  ##delete Normal 11 (position 51)
################################################################################################
###############################################################################################
####      IS Patient
filepath = "C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\IS Patients\\"
#filepath = "//Users//sony//Desktop//Plots//EEGDataServer//ISCoh//"
##### IS Patient
subName = 1:34
### 19x19 connection, #number of subject, frequency
p = length(myelectrodes)
medianListPre = array(0, dim = c(p,p,21,5));
medianListPost = array(0, dim = c(p,p,21,5));
ISsubjectID = c(1,  4 , 5,  6,  8 , 9, 10, 11, 13, 16, 18, 19, 20, 22, 25, 28, 29, 30, 31 ,32, 34)
ISNotR.id = c(1,8,9,10,13,16,25,30,31,34)
ISR.id = setdiff(ISsubjectID,ISNotR.id)
medianNormal = readRDS("C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\Median\\medianNorm.rds")
medianISPre = readRDS("C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\Median\\medianIS_Pre.rds")
medianISPost = readRDS("C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\Median\\medianIS_Post.rds")
medianNormal = readRDS("C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\Median\\medianListNorm.rds")
medianISPre = readRDS("C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\Median\\medianListPre.rds")
medianISPost = readRDS("C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\Median\\medianListPost.rds")
groupISNotR.Pre = groupISNotR.Post = array(0,dim = c(15,15,length(ISNotR.id),5))
groupISR.Post = groupISR.Pre = array(0,dim = c(15,15,length(ISR.id),5))
countnotR = countR = 1;
for(i in 1:length(ISsubjectID)){
if(ISsubjectID[i] %in% ISNotR.id){
groupISNotR.Pre[,,countnotR,] = medianISPre[,,i,]
groupISNotR.Post[,,countnotR,] = medianISPost[,,i,]
countnotR = countnotR + 1
}else{
groupISR.Pre[,,countR,] = medianISPre[,,i,]
groupISR.Post[,,countR,] = medianISPost[,,i,]
countR = countR + 1
}
}
pValues = matrix(0,4,5)
colnames(pValues) = c('Delta','Theta','Alpha','Beta','Gamma')
rownames(pValues) = c('NR Pre vs Post', 'R Pre vs Post', 'NR Post vs Normal','R Post vs Normal')
testStatistics = matrix(0,4,5)
##ISNotR: pre vs post
for(freq in 1:5){
X = groupISNotR.Post[,,,freq]
Y = groupISNotR.Pre[,,,freq]
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), test = "signed.rank")
pValues[1,freq] = result$p.value
testStatistics[1,freq] = result$statistic
}
##ISR: pre vs post
for(freq in 1:5){
X = groupISR.Post[,,,freq]
Y = groupISR.Pre[,,,freq]
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), test = "signed.rank")
pValues[2,freq] = result$p.value
testStatistics[2,freq] = result$statistic
}
library(pdSpecEst)
for(freq in 1:5){
X = groupISNotR.Post[,,,freq]
Y = groupISNotR.Pre[,,,freq]
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), test = "signed.rank")
pValues[1,freq] = result$p.value
testStatistics[1,freq] = result$statistic
}
##ISR: pre vs post
for(freq in 1:5){
X = groupISR.Post[,,,freq]
Y = groupISR.Pre[,,,freq]
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), test = "signed.rank")
pValues[2,freq] = result$p.value
testStatistics[2,freq] = result$statistic
}
for(freq in 1:5){
X = groupISNotR.Post[,,,freq]
Y = medianNormal[,,,freq]
#X.log = sapply(1:dim(X)[3], function(i) Logm(diag(dim(X)[1]),Re(X[,,i])), simplify = "array")
#Y.log = sapply(1:dim(Y)[3], function(i) Logm(diag(dim(X)[1]),Re(Y[,,i])), simplify = "array")
#result = RankSumTest(Re(X.log),Re(Y.log),5,5)
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), sample.sizes = c(dim(X)[3],dim(Y)[3]), test = 'rank.sum', metric = 'logEuclidean')
#result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), sample.sizes = c(dim(X)[3],dim(Y)[3]), test = 'rank.sum', metric = 'Riemannian')
pValues[3,freq] = result$p.value
testStatistics[3,freq] = result$statistic
}
##ISR post vs Normal
for(freq in 1:5){
X = groupISR.Post[,,,freq]
Y = medianNormal[,,,freq]
#X.log = sapply(1:dim(X)[3], function(i) Logm(diag(dim(X)[1]),Re(X[,,i])), simplify = "array")
#Y.log = sapply(1:dim(Y)[3], function(i) Logm(diag(dim(X)[1]),Re(Y[,,i])), simplify = "array")
#result = RankSumTest(Re(X.log),Re(Y.log),5,5)
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), sample.sizes = c(dim(X)[3],dim(Y)[3]), test = 'rank.sum', metric = 'logEuclidean')
#result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), sample.sizes = c(dim(X)[3],dim(Y)[3]), test = 'rank.sum', metric = 'Riemannian')
pValues[4,freq] = result$p.value
testStatistics[4,freq] = result$statistic
}
View(testStatistics)
View(pValues)
medianNormal = readRDS("C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\Median\\SFResult\\medianNormal.rds")
medianISPre = readRDS("C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\Median\\SFResult\\medianIS_Pre.rds")
medianISPost = readRDS("C:\\Users\\SONY\\Documents\\MyData\\EEGSpasms\\Result\\Median\\SFResult\\medianIS_Post.rds")
groupISNotR.Pre = groupISNotR.Post = array(0,dim = c(15,15,length(ISNotR.id),5))
groupISR.Post = groupISR.Pre = array(0,dim = c(15,15,length(ISR.id),5))
countnotR = countR = 1;
for(i in 1:length(ISsubjectID)){
if(ISsubjectID[i] %in% ISNotR.id){
groupISNotR.Pre[,,countnotR,] = medianISPre[,,i,]
groupISNotR.Post[,,countnotR,] = medianISPost[,,i,]
countnotR = countnotR + 1
}else{
groupISR.Pre[,,countR,] = medianISPre[,,i,]
groupISR.Post[,,countR,] = medianISPost[,,i,]
countR = countR + 1
}
}
#################### Testing
##ISNotR: pre vs post, ISR = pre vs post, post_notR vs Normal, post_R vs Normal
pValues = matrix(0,4,5)
colnames(pValues) = c('Delta','Theta','Alpha','Beta','Gamma')
rownames(pValues) = c('NR Pre vs Post', 'R Pre vs Post', 'NR Post vs Normal','R Post vs Normal')
testStatistics = matrix(0,4,5)
##ISNotR: pre vs post
for(freq in 1:5){
X = groupISNotR.Post[,,,freq]
Y = groupISNotR.Pre[,,,freq]
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), test = "signed.rank")
pValues[1,freq] = result$p.value
testStatistics[1,freq] = result$statistic
}
##ISR: pre vs post
for(freq in 1:5){
X = groupISR.Post[,,,freq]
Y = groupISR.Pre[,,,freq]
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), test = "signed.rank")
pValues[2,freq] = result$p.value
testStatistics[2,freq] = result$statistic
}
##ISNotR post vs Normal
#outlier? 8,15,17,36,40,82,98
#medianNormal = medianNormal[,,-c(7,10,11,12,16,19,21),]
for(freq in 1:5){
X = groupISNotR.Post[,,,freq]
Y = medianNormal[,,,freq]
#X.log = sapply(1:dim(X)[3], function(i) Logm(diag(dim(X)[1]),Re(X[,,i])), simplify = "array")
#Y.log = sapply(1:dim(Y)[3], function(i) Logm(diag(dim(X)[1]),Re(Y[,,i])), simplify = "array")
#result = RankSumTest(Re(X.log),Re(Y.log),5,5)
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), sample.sizes = c(dim(X)[3],dim(Y)[3]), test = 'rank.sum', metric = 'logEuclidean')
#result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), sample.sizes = c(dim(X)[3],dim(Y)[3]), test = 'rank.sum', metric = 'Riemannian')
pValues[3,freq] = result$p.value
testStatistics[3,freq] = result$statistic
}
##ISR post vs Normal
for(freq in 1:5){
X = groupISR.Post[,,,freq]
Y = medianNormal[,,,freq]
#X.log = sapply(1:dim(X)[3], function(i) Logm(diag(dim(X)[1]),Re(X[,,i])), simplify = "array")
#Y.log = sapply(1:dim(Y)[3], function(i) Logm(diag(dim(X)[1]),Re(Y[,,i])), simplify = "array")
#result = RankSumTest(Re(X.log),Re(Y.log),5,5)
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), sample.sizes = c(dim(X)[3],dim(Y)[3]), test = 'rank.sum', metric = 'logEuclidean')
#result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), sample.sizes = c(dim(X)[3],dim(Y)[3]), test = 'rank.sum', metric = 'Riemannian')
pValues[4,freq] = result$p.value
testStatistics[4,freq] = result$statistic
}
##ISR normal vs Normal
p.values = rep(0,5)
allgrp = 1:19
for(i in 1:500){
grp1 = sample(allgrp,10,replace = FALSE)
grp2 = setdiff(allgrp,grp1)
for(freq in 1:5){
X = medianNormal[,,grp1,freq]
Y = medianNormal[,,grp2,freq]
#X.log = sapply(1:dim(X)[3], function(i) Logm(diag(dim(X)[1]),Re(X[,,i])), simplify = "array")
#Y.log = sapply(1:dim(Y)[3], function(i) Logm(diag(dim(X)[1]),Re(Y[,,i])), simplify = "array")
#result = RankSumTest(Re(X.log),Re(Y.log),5,5)
result = pdRankTests(array(c(X, Y), dim = c(dim(X)[1], dim(X)[1], dim(X)[3]+dim(Y)[3])), sample.sizes = c(dim(X)[3],dim(Y)[3]), test = 'rank.sum', metric = 'logEuclidean')
p.values[freq] = p.values[freq] + ifelse(result$p.value < 0.05, 1, 0)
}
}
View(pValues)
View(testStatistics)
install.packages('dvtools')
install.packages('Rtools')
install.packages('devtools')
library(credsubs)
install.packages('credsubs')
library(credsubs)
getAnywhere(credsubs)
getAnywhere(sim.cred.band())
shiny::runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
samplet = rnorm(100,0,2)
t.test(samplet,mu=0)
t.test(samplet,mu=0,'greater')
t.test(samplet,mu=0,alternative = 'greater')
t.test(samplet,mu=0,alternative = 'less')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
seq(-1,1,0.1)
x=seq(-1,1,0.1)
plot(x,dt(x,4),type='l')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
xvalue = seq(-(3+1),(abs(3+1), 0.1)
xvalue = seq(-(3+1),(3+1), 0.1)
plot(xvalue, dt(xvalue, 4), xlab = 't', ylab = '', main = 't Distribution',type='l')
points(3, 0, col='red', pch=19)
text(3, 2, paste("t = ", 3) ,col='red')
text(3, 10, paste("t = ", 3) ,col='red')
text(3, 0.1, paste("t = ", 3) ,col='red')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
segments(x0=c(3, 3+1),
y0=c(0.01,0.01),
x1=c(3,3+1),
y1=c(dt(3, 4), dt(3+1, 4)),
lwd=2, col=c("darkgreen", "darkgreen"), lty=2)
x.t=seq(3,3+1,0.1)
y.t=dt(x.t,4)
polygon(x.t, y.t,
border=NA, col="lightgray")
polygon(c(x.t, rev(x.t)), c(y.t, rep(-1, length(y.t))),
border=NA, col="lightgray")
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
runApp('G:/My Drive/A3 PERSONAL/1 Jobs Presentation/TeachingDemo')
rmarkdown::render(research)
rmarkdown::render('research.Rmd')
setwd("~/GitHub/DuyNgo")
rmarkdown::render('research.Rmd')
rmarkdown::render('pub.Rmd')
rmarkdown::render('teaching.Rmd')
rmarkdown::render('cv.Rmd')
rmarkdown::render('cv.Rmd')
rmarkdown::render('teaching.Rmd')
rmarkdown::render('pub.Rmd')
rmarkdown::render('research.Rmd')
rmarkdown::render('index.Rmd')
rmarkdown::render('index.Rmd')
rmarkdown::render('research.Rmd')
rmarkdown::render('pub.Rmd')
rmarkdown::render('cv.Rmd')
rmarkdown::render('teaching.Rmd')
rmarkdown::render('./4teaching/teaching.Rmd')
rmarkdown::render('/4teaching/teaching.Rmd')
rmarkdown::render('./4.teaching/teaching.Rmd')
rmarkdown::render('./4.teaching/teaching.Rmd')
rmarkdown::render('./1.home/index.Rmd')
rmarkdown::render('./3.pub/pub.Rmd')
rmarkdown::render('./5.cv/cv.Rmd')
rmarkdown::render('./4. teaching/teaching.Rmd')
rmarkdown::render('./4.teaching/teaching.Rmd')
rmarkdown::render('./4.teaching/teaching.Rmd')
rmarkdown::render('./1.home/index.Rmd')
rmarkdown::render('./2.research/research.Rmd')
rmarkdown::render('./3.pub/pub.Rmd')
rmarkdown::render('./4.teaching/teaching.Rmd')
rmarkdown::render('./5.cv/cv.Rmd')
rmarkdown::render('./2.research/research.Rmd')
rmarkdown::render('./2research/research.Rmd')
rmarkdown::render('./5cv/cv.Rmd')
rmarkdown::render('./4teaching/teaching.Rmd')
rmarkdown::render('./3pub/pub.Rmd')
rmarkdown::render('index.Rmd')
rmarkdown::render('./2research/research.Rmd')
rmarkdown::render('index.Rmd')
rmarkdown::render('research.Rmd')
rmarkdown::render('pub.Rmd')
rmarkdown::render('teaching.Rmd')
rmarkdown::render('cv.Rmd')
rmarkdown::render('cv.Rmd')
rmarkdown::render('act.Rmd')
rmarkdown::render('teaching.Rmd')
rmarkdown::render('pub.Rmd')
rmarkdown::render('research.Rmd')
rmarkdown::render('index.Rmd')
rmarkdown::render('index.Rmd')
rmarkdown::render('index.Rmd')
rmarkdown::render('research.Rmd')
rmarkdown::render('pub.Rmd')
rmarkdown::render('teaching.Rmd')
